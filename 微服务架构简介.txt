为什么需要微服务架构
	传统的整体式架构应用开发系统，随着新需求的不断增加，企业更新和修复的成本越来越大
	企业需要迁移与应用到移动端，这要求企业能实现应用功能的快速上线
	soa可以通过标准化服务接口实现能力的重用，但不适应快速变化的需求
	云应用的不同开发运维模式
	轻量级运行时技术 node.js,was Liberty 
	RESTful API接口，轻量级消息机制
	简化基础设施 操作系统虚拟机，hypervisors 
				容器化 e.g.Docker
				基础设施即服务，IaaS
				工作负载虚拟化 Kubernetes,Spark等
	服务平台化，PaaS：云服务平台上具有自动缩放、工作负载管理、SLA管理、消息机制、缓存、构建管理等各种按需使用的服务
	新的可替代的数据持久化模型
	标准化代码管理
什么是微服务
	微服务是一种架构风格，一个大型复杂软件应用由一个或多个微服务组成。
	系统中的各个微服务可被独立部署，各个微服务之间是松耦合的。每个微服务仅关注于完成一件任务并很好的完成该任务。在所有情况下，每个任务代表着一个小的业务能力。
微服务的通用特性
	1.通过服务实现应用的组件化，在应用架构设计中通过将整体应用切分为可独立部署及升级的微服务方式进行组件化设计
	2.围绕业务能力组织服务
	3.产品而非项目模式，负责一个微服务完整的生命周期，提倡谁开发，谁运营的开发运维一体化形式
	4.智能端点与管道扁平化：Restful http 协议和仅提供消息路由功能的轻量级异步机制是微服务架构中最常用的通讯机制
	5.去中心化治理，微服务的技术标准倾向于寻找其他开发者已经成功验证解决类似问题的技术
	6.去中心化数据管理，提倡采用多样性的持久化技术，让每一个微服务管理其自己的数据库，允许使用不同的数据库
	7.基础设施自动化，云化和自动化部署等技术极大地降低了微服务构建、部署和运维的难度，
	8.故障处理设计：微服务重视建立构架及业务相关指标的实时监控和日志机制
	9.演进式设计，
微服务架构的优点
	1.每个服务搜比较简单，只关注一个业务功能
	2.微服务架构是松耦合的，可以提供更多的灵活性
	3.可以根据具体的业务选择不同的语言和技术，实现针对化设计
	4.每个微服务由不同团队开发，加快推出市场速度
	5.微服务架构是持续交付的巨大推动力，允许在频繁发布不同服务的同时保持系统其他部分的可用性和稳定性
微服务架构的缺点
	1.微服务的一些想法是好的，但是实现时会出现复杂性
	2.运维开销和成本增加
	3.必须有坚实的pevdos开发运维一体化技能
	4.隐士接口以及接口匹配问题
	5.代码重复
	6.分布式系统的复杂性：网络延时，容错性，消息序列化，不可靠的网络，异步机制，版本化，差异化的工作负载，
	7.异步机制，可测性挑战